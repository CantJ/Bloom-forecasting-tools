}
sensVals
sensList <- list()
for(es in 1:length(seedSeq)){
# Implement baseline simulation with a call to the JellySim function.
set.seed(es) # fix random number seed across repeated simulations to ensure consistent stochasticity across iterations.
BaseSim <- quiet(JellySim(pars = pars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Repeat simulation once for each specified parameter after applying a small adjustment to the selected parameter
if(any(params == 'all')){
# Define sensitivity storage
sensVals <- numeric(length(pars))
for(ii in 1:length(pars)){
# impose percentage change to selected parameter
newpars <- pars # duplicate parameter list
newpars[ii] <- newpars[ii] + (newpars[ii] * s)
# Re-run simulation
set.seed(seedSeq[es]) # reset random number seed.
sensSim <- quiet(JellySim(pars = newpars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Compute sensitivity
sensVals[ii] <- sum(values(sensSim$mean) - values(BaseSim$mean))/(newpars[ii]-pars[ii])
}
# Store iteration output
sensList[[es]] <- sensVals
} else {
# Define sensitivity storage
sensVals <- numeric(length(params))
for(ii in 1:length(params)){
# impose percentage change to selected parameter
newpars <- pars # duplicate parameter list
newpars[params[ii]] <- newpars[params[ii]] + (newpars[params[ii]] * s)
# Re-run simulation
set.seed(seedSeq[es]) # reset random number seed.
sensSim <- quiet(JellySim(pars = newpars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Compute sensitivity
sensVals[ii] <- sum(values(sensSim$mean) - values(BaseSim$mean))/(newpars[params[ii]]-pars[params[ii]])
}
# Store iteration output
sensList[[es]] <- sensVals
}
}
View(sensList)
View(sensList)
sensList[[10]]
sensList[[9]]
sensList[[8]]
sensList[[7]]
s = 0.001
if(any(params == 'all'))
)
any(params == 'all')
# Define sensitivity storage
sensVals <- numeric(length(params))
params
ii = 1
# impose percentage change to selected parameter
newpars <- pars # duplicate parameter list
newpars[params[ii]]
(newpars[params[ii]] * s)
seedSeq[es]
effSize = 20
# Repeat sensitivity computations to evaluate effect sizes across multiple density scenarios.
# generate a sequence of random number seeds (for fixing stochasticity within iterations)
seedSeq <- round(sample(0:1000000, effSize, replace = F), 0)
sensList <- list()
for(es in 1:length(seedSeq)){
# Implement baseline simulation with a call to the JellySim function.
set.seed(es) # fix random number seed across repeated simulations to ensure consistent stochasticity across iterations.
BaseSim <- quiet(JellySim(pars = pars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Repeat simulation once for each specified parameter after applying a small adjustment to the selected parameter
if(any(params == 'all')){
# Define sensitivity storage
sensVals <- numeric(length(pars))
for(ii in 1:length(pars)){
# impose percentage change to selected parameter
newpars <- pars # duplicate parameter list
newpars[ii] <- newpars[ii] + (newpars[ii] * s)
# Re-run simulation
set.seed(seedSeq[es]) # reset random number seed.
sensSim <- quiet(JellySim(pars = newpars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Compute sensitivity
sensVals[ii] <- sum(values(sensSim$mean) - values(BaseSim$mean))/(newpars[ii]-pars[ii])
}
# Store iteration output
sensList[[es]] <- sensVals
} else {
# Define sensitivity storage
sensVals <- numeric(length(params))
for(ii in 1:length(params)){
# impose percentage change to selected parameter
newpars <- pars # duplicate parameter list
newpars[params[ii]] <- newpars[params[ii]] + (newpars[params[ii]] * s)
# Re-run simulation
set.seed(seedSeq[es]) # reset random number seed.
sensSim <- quiet(JellySim(pars = newpars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Compute sensitivity
sensVals[ii] <- sum(values(sensSim$mean) - values(BaseSim$mean))/(newpars[params[ii]]-pars[params[ii]])
}
# Store iteration output
sensList[[es]] <- sensVals
}
}
View(sensList)
values(BaseSim$mean)
sum(values(sensSim$mean) - values(BaseSim$mean))
(newpars[params[ii]]-pars[params[ii]])
newpars[params[ii]]
pars[params[ii]]
sum(values(sensSim$mean) - values(BaseSim$mean))
newpars[params[ii]]
# Define sensitivity storage
sensVals <- numeric(length(params))
# impose percentage change to selected parameter
newpars <- pars # duplicate parameter list
ii = 1
newpars[params[ii]]
pars[params[ii]]
newpars[params[ii]] + (newpars[params[ii]] * s)
newpars[params[ii]] <- newpars[params[ii]] + (newpars[params[ii]] * s)
seedSeq[es]
# Re-run simulation
set.seed(seedSeq[es]) # reset random number seed.
sensSim <- quiet(JellySim(pars = newpars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
values(sensSim$mean)
sum(values(sensSim$mean) - values(BaseSim$mean))
sum(values(sensSim$mean) - values(BaseSim$mean))/(newpars[params[ii]]-pars[params[ii]])
# Define sensitivity storage
sensVals <- numeric(length(params))
for(ii in 1:length(params)){
# impose percentage change to selected parameter
newpars <- pars # duplicate parameter list
newpars[params[ii]] <- newpars[params[ii]] + (newpars[params[ii]] * s)
# Re-run simulation
set.seed(seedSeq[es]) # reset random number seed.
sensSim <- quiet(JellySim(pars = newpars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Compute sensitivity
sensVals[ii] <- sum(values(sensSim$mean) - values(BaseSim$mean))/(newpars[params[ii]]-pars[params[ii]])
}
# Plot sensitivities
if(any(params == 'all')){ sensVals <- data.frame(Name = names(pars), Sens = sensVals)
} else { sensVals <- data.frame(Name = params, Sens = sensVals)  }
View(sensVals)
# Define sensitivity storage
sensVals <- numeric(length(params))
for(ii in 1:length(params)){
# impose percentage change to selected parameter
newpars <- pars # duplicate parameter list
newpars[params[ii]] <- newpars[params[ii]] + (newpars[params[ii]] * s)
# Re-run simulation
set.seed(seedSeq[es]) # reset random number seed.
sensSim <- quiet(JellySim(pars = newpars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Compute proportional sensitivity
sensVals[ii] <- log(sum(values(sensSim$mean))) - log(sum(values(BaseSim$mean)))/(log(newpars[params[ii]]) - log(pars[params[ii]]))
}
sum(values(sensSim$mean))
(sum(values(sensSim$mean)) - sum(values(BaseSim$mean)))
(newpars[params[ii]] - pars[params[ii]])
(sum(values(sensSim$mean)) - sum(values(BaseSim$mean)))/(newpars[params[ii]] - pars[params[ii]])
# Compute elasticity
sensVal <- ((sum(values(sensSim$mean)) - sum(values(BaseSim$mean)))/(newpars[params[ii]] - pars[params[ii]]))
pars[params[ii]]
(pars[params[ii]]/sum(values(BaseSim$mean)))
(pars[params[ii]]/sum(values(BaseSim$mean)))*sensVal
pars[params[ii]]
pars[params[ii]]/1.05
# Repeat simulation once for each specified parameter after applying a small adjustment to the selected parameter
if(any(params == 'all')){
# Define sensitivity storage
elasVals <- numeric(length(pars))
for(ii in 1:length(pars)){
# impose percentage change to selected parameter
newpars <- pars # duplicate parameter list
newpars[ii] <- newpars[ii] + (newpars[ii] * s)
# Re-run simulation
set.seed(seedSeq[es]) # reset random number seed.
sensSim <- quiet(JellySim(pars = newpars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Compute elasticity (proportional sensitivity)
sensVal <- (sum(values(sensSim$mean)) - sum(values(BaseSim$mean)))/(newpars[ii] - pars[ii])
elasVals[ii] <- (pars[ii]/sum(values(BaseSim$mean)))*sensVal
}
# Store iteration output
elasList[[es]] <- elasVals
} else {
# Define sensitivity storage
elasVals <- numeric(length(params))
for(ii in 1:length(params)){
# impose percentage change to selected parameter
newpars <- pars # duplicate parameter list
newpars[params[ii]] <- newpars[params[ii]] + (newpars[params[ii]] * s)
# Re-run simulation
set.seed(seedSeq[es]) # reset random number seed.
sensSim <- quiet(JellySim(pars = newpars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Compute elasticity (proportional sensitivity)
sensVal <- (sum(values(sensSim$mean)) - sum(values(BaseSim$mean)))/(newpars[params[ii]] - pars[params[ii]])
elasVals[ii] <- (pars[params[ii]]/sum(values(BaseSim$mean)))*sensVal
}
# Store iteration output
elasList[[es]] <- elasVals
}
# Define sensitivity storage
elasVals <- numeric(length(params))
for(ii in 1:length(params)){
# impose percentage change to selected parameter
newpars <- pars # duplicate parameter list
newpars[params[ii]] <- newpars[params[ii]] + (newpars[params[ii]] * s)
# Re-run simulation
set.seed(seedSeq[es]) # reset random number seed.
sensSim <- quiet(JellySim(pars = newpars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Compute elasticity (proportional sensitivity)
sensVal <- (sum(values(sensSim$mean)) - sum(values(BaseSim$mean)))/(newpars[params[ii]] - pars[params[ii]])
elasVals[ii] <- (pars[params[ii]]/sum(values(BaseSim$mean)))*sensVal
}
elasVals
data.frame(sensList)
do.call(rbind(sensList))
do.call(rbind, sensList)
sd(do.call(rbind, sensList))
colMeans(do.call(rbind, sensList))
do.call(rbind, sensList)
?apply
apply((do.call(rbind, sensList)), 2, sd)
apply((do.call(rbind, sensList)), 2, var)
apply((do.call(rbind, sensList)), 2, se)
apply((do.call(rbind, sensList)), 2, function (x) { sd(x)/sqrt(length((x))) })
# Compute mean sensitivities and their variance across selected parameters.
if(any(params == 'all')) { sensVals <- data.frame(Name = names(pars), Sens = colMeans(do.call(rbind, sensList)), sd = sd(do.call(rbind, sensList)))
} else { sensVals <- data.frame(Name = params, Sens = colMeans(do.call(rbind, sensList)), sd = apply((do.call(rbind, sensList)), 2, function (x) { sd(x)/sqrt(length((x))) })) }
View(sensVals)
View(sensVals)
# Compute effect size.
sapply(sensList, '[[')
# Compute effect size.
sapply(sensList, '[')
# Compute effect size.
sapply(sensList, '[', 1)
ggplot(data = sensVals, aes(x = Sens, y = Name)) +
geom_col(width = 0.6, fill = '#2C2D7C') +
geom_vline(aes(xintercept = 0), linetype = 'dashed', linewidth = 1.2, col = '#DC9257') +
theme_classic() +
theme(axis.line.x = element_line(linewidth = 1), axis.line.y = element_line(linewidth = 1)) +
theme(axis.text.y = element_text(size = 10), axis.text.x = element_text(size = 15), axis.title = element_text(size = 20)) +
theme(plot.background = element_rect(fill = 'white', color = 'white', linewidth = 0),
panel.background = element_rect(fill = 'white', color = 'white')) +
xlab("\nSensitivity") +
ylab("Parameter\n") +
theme(plot.title = element_text(size = 20))
# Plot sensitivities
# Generate plot
sensPlot <- ggplot(data = sensVals, aes(x = Sens, y = Name)) +
geom_col(width = 0.6, fill = '#2C2D7C') +
geom_errorbar(aes(y = Name, xmin = Sens - sd, xmax = Sens + sd), data = sensVals) +
geom_vline(aes(xintercept = 0), linetype = 'dashed', linewidth = 1.2, col = '#DC9257') +
theme_classic() +
theme(axis.line.x = element_line(linewidth = 1), axis.line.y = element_line(linewidth = 1)) +
theme(axis.text.y = element_text(size = 10), axis.text.x = element_text(size = 15), axis.title = element_text(size = 20)) +
theme(plot.background = element_rect(fill = 'white', color = 'white', linewidth = 0),
panel.background = element_rect(fill = 'white', color = 'white')) +
xlab("\nSensitivity") +
ylab("Parameter\n") +
theme(plot.title = element_text(size = 20))
?geom_errorbar
# Plot sensitivities
# Generate plot
sensPlot <- ggplot(data = sensVals, aes(x = Sens, y = Name)) +
geom_point(width = 0.6, fill = '#2C2D7C') +
geom_errorbar(aes(y = Name, xmin = Sens - sd, xmax = Sens + sd), data = sensVals) +
geom_vline(aes(xintercept = 0), linetype = 'dashed', linewidth = 1.2, col = '#DC9257') +
theme_classic() +
theme(axis.line.x = element_line(linewidth = 1), axis.line.y = element_line(linewidth = 1)) +
theme(axis.text.y = element_text(size = 10), axis.text.x = element_text(size = 15), axis.title = element_text(size = 20)) +
theme(plot.background = element_rect(fill = 'white', color = 'white', linewidth = 0),
panel.background = element_rect(fill = 'white', color = 'white')) +
xlab("\nSensitivity") +
ylab("Parameter\n") +
theme(plot.title = element_text(size = 20))
# Plot sensitivities
# Generate plot
sensPlot <- ggplot(data = sensVals, aes(x = Sens, y = Name)) +
geom_point(fill = '#2C2D7C') +
geom_errorbar(aes(y = Name, xmin = Sens - sd, xmax = Sens + sd), data = sensVals) +
geom_vline(aes(xintercept = 0), linetype = 'dashed', linewidth = 1.2, col = '#DC9257') +
theme_classic() +
theme(axis.line.x = element_line(linewidth = 1), axis.line.y = element_line(linewidth = 1)) +
theme(axis.text.y = element_text(size = 10), axis.text.x = element_text(size = 15), axis.title = element_text(size = 20)) +
theme(plot.background = element_rect(fill = 'white', color = 'white', linewidth = 0),
panel.background = element_rect(fill = 'white', color = 'white')) +
xlab("\nSensitivity") +
ylab("Parameter\n") +
theme(plot.title = element_text(size = 20))
# Plot sensitivities
# Generate plot
sensPlot <- ggplot(data = sensVals, aes(x = Sens, y = Name)) +
geom_col(width = 0.6, fill = '#2C2D7C') +
geom_errorbar(aes(y = Name, xmin = Sens - sd, xmax = Sens + sd), data = sensVals)
sensPlot
ggplot(data = sensVals, aes(x = Sens, y = Name)) +
geom_col(width = 0.6, fill = '#2C2D7C') +
geom_errorbar(aes(y = Name, xmin = Sens - sd, xmax = Sens + sd), data = sensVals) +
geom_vline(aes(xintercept = 0), linetype = 'dashed', linewidth = 1.2, col = '#DC9257') +
theme_classic() +
theme(axis.line.x = element_line(linewidth = 1), axis.line.y = element_line(linewidth = 1)) +
theme(axis.text.y = element_text(size = 10), axis.text.x = element_text(size = 15), axis.title = element_text(size = 20)) +
theme(plot.background = element_rect(fill = 'white', color = 'white', linewidth = 0),
panel.background = element_rect(fill = 'white', color = 'white')) +
xlab("\nSensitivity") +
ylab("Parameter\n") +
theme(plot.title = element_text(size = 20))
BaseSim <- quiet(JellySim(pars = pars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Implement baseline simulation with a call to the JellySim function.
set.seed(es) # fix random number seed across repeated simulations to ensure consistent stochasticity across iterations.
BaseSim2 <- quiet(JellySim(pars = pars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Implement baseline simulation with a call to the JellySim function.
set.seed(es) # fix random number seed across repeated simulations to ensure consistent stochasticity across iterations.
BaseSim3 <- quiet(JellySim(pars = pars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
sum(values(BaseSim$mean))
sum(values(BaseSim2$mean))
sum(values(BaseSim3$mean))
# Load required functions
source(paste0(filePath, 'JellySim.R'))
source(paste0(filePath, 'DMat.R'))
source(paste0(filePath, 'SimPlot.R'))
source(paste0(filePath, 'ParSens.R'))
# Load demographic parameters
demogpars <- read.csv(paste0(filePath, 'Demographic parameters.csv'), row.names = 1)
demogpars <- with(demogpars, setNames(x, rownames(demogpars))) # ensure appropriate row naming
# Load drifting details
load(paste0(filePath, 'ParticleTracks2021.RData'))
##############################################
# STEP 2: Define model parameters
##############################################
# define user specific model parameters
# temporal resolutions of drifting simulations
nd = 30
# simulation spatial extents
xx = 31
xn = 3
yx = 66
yn = 53
# selected release locations
sites = c(598,240,954,597) # corresponds with the selection of sites in the central Baltic, the eastern Baltic, the Gulf of Finland and the Skagerrak & Kattegat region.
# release timings
months = c(2:5) # corresponds with February through to May inclusive
# Demographic matrix dimensions
m = 200
# Resampling iterations
z = 10
# Multicore processing (True or False)
pl = TRUE
# Resupply the same details to the ParSens arguments as provided to JellySim above,
# less a value for zmax and selecting only one of the four release locations
set.seed(56239)
JellySens <- ParSens(pars = demogpars, m = m, driftData = SINMOD_data, n_days = nd,
xmx = xx, xmn = xn, ymx = yx, ymn = yn, rel_location = sites, rel_months = months, parallel = pl,
params = c('P.dens.temp', 'M.surv.temp', 'Growth.slope', 'E.surv.temp', 'No.ephyra.temp'))
# Load required functions
source(paste0(filePath, 'JellySim.R'))
source(paste0(filePath, 'DMat.R'))
source(paste0(filePath, 'SimPlot.R'))
source(paste0(filePath, 'ParSens.R'))
# Load demographic parameters
demogpars <- read.csv(paste0(filePath, 'Demographic parameters.csv'), row.names = 1)
demogpars <- with(demogpars, setNames(x, rownames(demogpars))) # ensure appropriate row naming
# Load drifting details
load(paste0(filePath, 'ParticleTracks2021.RData'))
##############################################
# STEP 2: Define model parameters
##############################################
# define user specific model parameters
# temporal resolutions of drifting simulations
nd = 30
# simulation spatial extents
xx = 31
xn = 3
yx = 66
yn = 53
# selected release locations
sites = c(598,240,954,597) # corresponds with the selection of sites in the central Baltic, the eastern Baltic, the Gulf of Finland and the Skagerrak & Kattegat region.
# release timings
months = c(2:5) # corresponds with February through to May inclusive
# Demographic matrix dimensions
m = 200
# Resampling iterations
z = 10
# Multicore processing (True or False)
pl = TRUE
# Resupply the same details to the ParSens arguments as provided to JellySim above,
# less a value for zmax and selecting only one of the four release locations
set.seed(56239)
JellySens <- ParSens(pars = demogpars, m = m, driftData = SINMOD_data, n_days = nd,
xmx = xx, xmn = xn, ymx = yx, ymn = yn, rel_location = sites, rel_months = months, parallel = pl,
params = c('P.dens.temp', 'M.surv.temp', 'Growth.slope', 'E.surv.temp', 'No.ephyra.temp'))
# A script illustrating the use of the JellySim, DMat, and SimPlot functions in predicting spatial
# and temporal patterns in the movements of Aurelia aurita individuals within the Baltic Sea
# Primary Author: James Cant
# Date Last modified: Dec 2023
# ------------------------------------------------------------------------------------
##############################################
# STEP 1: Load required files
##############################################
# Define file path
filePath <- 'file_directory_path/'
# Load required functions
source(paste0(filePath, 'JellySim.R'))
filePath <- '~/Documents/GitHub/Bloom-forecasting-tools/'
# Load required functions
source(paste0(filePath, 'JellySim.R'))
source(paste0(filePath, 'DMat.R'))
source(paste0(filePath, 'SimPlot.R'))
source(paste0(filePath, 'ParSens.R'))
# Load demographic parameters
demogpars <- read.csv(paste0(filePath, 'Demographic parameters.csv'), row.names = 1)
demogpars <- with(demogpars, setNames(x, rownames(demogpars))) # ensure appropriate row naming
# Load drifting details
load(paste0(filePath, 'ParticleTracks2021.RData'))
##############################################
# STEP 2: Define model parameters
##############################################
# define user specific model parameters
# temporal resolutions of drifting simulations
nd = 30
# simulation spatial extents
xx = 31
xn = 3
yx = 66
yn = 53
# selected release locations
sites = c(598,240,954,597) # corresponds with the selection of sites in the central Baltic, the eastern Baltic, the Gulf of Finland and the Skagerrak & Kattegat region.
# release timings
months = c(2:5) # corresponds with February through to May inclusive
# Demographic matrix dimensions
m = 200
# Resampling iterations
z = 10
# Multicore processing (True or False)
pl = TRUE
View(ParSens)
set.seed(56239)
JellySens <- ParSens(pars = demogpars, m = m, driftData = SINMOD_data, n_days = nd,
xmx = xx, xmn = xn, ymx = yx, ymn = yn, rel_location = sites, rel_months = months, parallel = pl,
params = c('P.dens.temp', 'M.surv.temp', 'Growth.slope', 'E.surv.temp', 'No.ephyra.temp'))
# Polyp Density, Medusae survival, Medusae growth, Ephyra survival, Number of Ephyra produced.
# Polyp Density, Medusae survival, Medusae growth, Ephyra survival, Number of Ephyra produced.
# Sensitivities
JellySens$plot
# Load package dependencies
packages <- c('data.table','terra','sf', 'purrr', 'pbapply', 'gamlss.dist', 'abind', 'spsUtil', 'ggplot2')
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], verbose = FALSE)
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
# define parallel processing details if requested
if(parallel == TRUE) {
# load additional required packages
packages <- c('parallel', 'foreach', 'future', 'doFuture')
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], verbose = FALSE)
}
invisible(lapply(packages, library, character.only = TRUE))
# Open multicore interface
nCores = detectCores() *0.5 # request 50% of the available cores so as not to overload the system
plan(multisession, workers = nCores)
}
# Just a little print out to manage user expectations
cat('Depending on the number of parameters being tested this may take a while to complete. Hang in there!\n')
# Repeat sensitivity computations to evaluate effect sizes across multiple density scenarios.
# generate a sequence of random number seeds (for fixing stochasticity within iterations)
seedSeq <- round(sample(0:1000000, iter, replace = F), 0)
iter = 30
# Repeat sensitivity computations to evaluate effect sizes across multiple density scenarios.
# generate a sequence of random number seeds (for fixing stochasticity within iterations)
seedSeq <- round(sample(0:1000000, iter, replace = F), 0)
sensList <- list()
es = 1
# Implement baseline simulation with a call to the JellySim function.
set.seed(es) # fix random number seed across repeated simulations to ensure consistent stochasticity across iterations.
BaseSim <- quiet(JellySim(pars = pars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
values(BaseSim$mean)
values(BaseSim3$mean)
# Define sensitivity storage
sensVals <- numeric(length(params))
for(ii in 1:length(params)){
# impose percentage change to selected parameter
newpars <- pars # duplicate parameter list
newpars[params[ii]] <- newpars[params[ii]] + (newpars[params[ii]] * s)
# Re-run simulation
set.seed(seedSeq[es]) # reset random number seed.
sensSim <- quiet(JellySim(pars = newpars, driftData = driftData, n_days = n_days, xmx = xmx, xmn = xmn, ymx = ymx, ymn = ymn,
m = m, zmax = 1, rel_location = rel_location, rel_months = rel_months, parallel = parallel))
# Compute sensitivity
sensVals[ii] <- sum(values(sensSim$mean) - values(BaseSim$mean))
}
sensVals
sum(values(sensSim$mean) - values(BaseSim3$mean))
sum(values(BaseSim$mean) - values(BaseSim3$mean))
