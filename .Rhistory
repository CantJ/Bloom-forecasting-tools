br(),
p(strong("3)"), "   Although, the polyp phase of most jellyfish species is highly cryptic, polyp populations can reach considerable densities as individuals reproduce through asexual reproduction.
Equally, it is not completely understood how long different jellyfish species spend as scyphistoma, but it is thought that this phase represents the longest part of the jellyfish life-cycle and can last several years."),
br(),
p(strong("4)"), HTML(paste0("   Eventually, however, when conditions allow, jellyfish polyps undergo a process known as ", em("strobilation"), ", during which they release free-swimming ", em("ephyra"), "."))),
br(),
p(strong("5)"), HTML(paste0("   These ephyrae then move away from the substrate, and over time, develop into sexually mature adult ", em("medusae"), ", the characteristic nomadic phase of the jellyfish life-cycle and ultimately the key bloom forming stage."))),
style  = 'text-align: left')
),
column(5, img(src = 'Life_cycle.png', width = '550px', style = "display: block; margin-left: auto; margin-right: auto;"),
h5(p(em(strong("Figure 2."), "Jellyfish life-cycles are complex and consist of both drifting and sessile benthic phases.")),
style = "text-align: center;")))
),
tabPanel("The Risk Map",
fluidRow(
column(5, h3(strong("Technical details"), style = 'color: #2C2D7C; text-align: center'),
h5(p("Predicting the timing and location of jellyfish blooms requires following the development of individual jellyfish from their polyp phase into adult medusae.
Medusae development and, crucially, the distance they travel, depends on the environmental conditions individuals experience as they drift through the water column.
Oceanic currents therefore play a key role in regulating spatial patterns in the movements of jellyfish populations.
To recreate this scenario, this Risk Map pairs two components to predict spatial and temporal patterns in the dynamics of jellyfish populations (Fig. 3):"),
p(strong("1)"), " A drifting model describing ocean current pathways and the environmental conditions (e.g., temperature and salinity) experienced by drifting particles."),
p(strong("2)"), " A demographic model describing how environmental conditions influence the survival, development, and reproduction of individual jellyfish."),
br(),
p(HTML(paste0("This Risk Map is currently configured to forecast bloom occurrence in Moon jelly (", em("A. aurita"), ") populations within the Baltic Sea, with efforts to expand these capabilities ongoing.
The Risk Map, therefore, contains a series of equations outlining how the prfiles of survival (S) and growth/development (G) vary across the life-cycle of ", em("A. aurita"), ", and how these are influenced by temperature and salinity.
The Risk Map then contains a series of pathways followed by drifting particles released within the Baltic Sea, and the environmental conditions they experienced as a result."))),
p(HTML(paste0("Selecting from preconfigured release sites, users of the Risk Map can then simulate the release of ephyrae at various coastal locations around the Baltic Sea.
The Risk Map then forecasts the development and expected movement of these released individuals, returning heat maps displaying how the density of ", em("A. aurita"), " medusae is expected to vary in both time and space across the Baltic Sea."))),
br(),
style  = 'text-align: center')),
column(7, br(), br(), br(), img(src = 'Work_flow.png', width = '700px', style = "display: block; margin-left: auto; margin-right: auto;"),
br(),
h5(p(em(strong("Figure 3."), "Combining drifting simulations and seasonal demographic models is necessary to forecast spatial and temporal patterns in the occurrence of jellyfish blooms.")),
style = "text-align: center;"),
br())
)
),
tabPanel("GoJelly",
fluidRow(column(4, br(), img(src = "https://gojelly.eu/wp-content/uploads/2018/12/170804_TMD3_013.jpg", style = 'width: 400px; display: block; margin-left: auto; margin-right: auto;'),
br()),
column(8, h3(strong("GoJelly: A gelatinous solution to plastic pollution"), style = 'color: #2C2D7C; text-align: center'),
h5(p("GoJelly is a collaborative effort bringing together a range of expertise in technological development, business analysis, fishing practises, and both environmental and social research, from across Denmark, Germany, Norway, Portugal, Slovenia, Israel, Italy, France, and China."),
p("Overall, GoJelly seeks to develop and promote innovative solutions to global marine pollution, using jellyfish as a microplastics filter and as a novel source of blue-green biotechnology products.
Throughout Europe, jellyfish, particularly when they aggregate in large numbers ('jellyfish blooms'), are typically seen as a nuisance as they can disrupt the fishing and tourism industries.
However, jellyfish can also play a crucial role in our ability to regulate and remove micro- and nano- plastic particles from the world’s oceans.
When disturbed, many jellyfish species release a mucus that, alongside a variety of functions, serves to remove particulate matter from the water that would otherwise interfere with the jellyfish’s activities.
It has been shown that this mucus acts as a flocculent and can efficiently concentrate together small plastic particles and even spilled oil.
Thus, jellyfish mucus represents a potential tool that could enable the collection and removal, and perhaps even the recycling, of plastic pollutants from coastal seas and wastewater effluents."),
p("The GoJelly consortium is also working to promote jellyfish as a valuable resource for the food and feed, and pharmaceutical industries.
With this work GoJelly aims to encourage the use of jellyfish as a biological fertilizer for organic farming, whilst also developing jellyfish-based products for use in the development of cosmetics, nutraceutics and medicine."),
style = 'text-align: center'),
br()))),
),
# Next insert a tab detailing the user interface components.
tabPanel(strong("Model Setup"),
# Insert a sidebar panel to display user defined parameters
sidebarLayout(
sidebarPanel(id = "sidebar",
style = "border-radius: 10px; box-shadow: 0 0 15px rgba(0, 0, 0, 0.3)",
# Select release location
numericInput("rel_location", h5(strong("Select release location(s):"), style = "color: #DC9257"), 564, min = 1, max = 1196),
h5(p(style = "text-align: justify; color: #EFF0F8", "Select the location from which to initiate the release of drifting jellyfish individuals. Release locations can be selected by selecting their corresponding index value. Move cursor over the map on the right to display the index values of potential polyp population locations within the Baltic Sea.")),
h5(p(style = "text-align: center; color: #DC9257", strong("Note:"), "only one release location can be selected per simulation.")),
br(),
# define acceptance of default simulation parameters
h5(strong("Additional parameters"), style = 'color: #DC9257; text-align: left'),
h5(p(style = "text-align: justify; color: #EFF0F8", "In order to forecast spatial and temporal patterns in the aggregation of Jellyfish populations this Risk Map tool requires details on the timing of ephyra release, and the number of times to repeat each simulation in order to account for natural variability in the processes of jellyfish survival and growth.")),
br(),
h5(em("Ephyra release period:"), style = "color: #DC9257"),
fluidRow(
column(8, # Define ephyra release period
sliderTextInput("rel_months", label = NULL,
choices = c("January", "February", "March", "April", "May", "June", "July",
"August", "September", "October", "November", "December"),
selected = c("February","May"), width = '100%'),
offset = 2)),
br(),
h5(em("Number of Iterations:"), style = "color: #DC9257"),
fluidRow(
column(6,
# Define number of stochastic iterations
knobInput("zmax", label = NULL,
min = 2, max = 1000, value = 10,
step = 1,
displayPrevious = TRUE,
fgColor = "#DC9257",
inputColor = "#DC9257"),
offset = 4)),
fluidRow(
column(10,
h5(p(style = "text-align: center", strong("Note:"), "Increasing the number of iterations will extend the time needed for the forecast to run to completion."), style = "color: #DC9257"),
br(),
offset = 1)),
h5(em("See further details tab for more information on each parameter"), style = "color: #EFF0F8"),
br(),
# Include a start button
actionButton("start", "Run Simulation",
style="color: #EFF0F8; background-color: #C75272; border-color: #fff")
),
# Next to these user inputs display an interactive map allowing users to selected desired release locations, and a tab detailing the biological relevance of each parameter.
mainPanel(
tabsetPanel(
tabPanel("Release locations",
h5(p("Move cursor over desired release location to display its Index number and GPS coordinates")),
# Insert map
box(ggplotly(sitePlot, tooltip = c("names", "Lat", "Lon"), width = 900, height = 750) %>% layout(legend = list(orientation = "h", x = 0, y = -0.2)) %>% config(displayModeBar = F),
style = 'display: block; margin-left: auto; margin-right: auto;')
),
tabPanel("Further details",
wellPanel(
h4("Jellyfish release: Locations & timing?", style = 'color: #DC9257; text-align: center'),
h5(p("Although people frequently observe drifting medusae, we know very little about where these jellyfish originate. To improve our ability to forecast the movements of jellyfish populations this Risk Map allows exploration into how the existence of polyp populations across various coastal locations could be expected to influence patterns in the appearance of jellyfish medusae. By changing the ",
span(strong("release location"), style = 'color: #DC9257'),
" you can investigate how changing the location from where jellyfish are initially released as ephyra (see life-cycle tab) impacts upon where their populations subsequently aggregate."),
p("Meanwhile, the timing of ephyrae release (strobilation) is regulated by local environmental conditions, and is usually initiated by a sudden drop in temperature followed by seasonal warming. In temperate European seas, strobilation therefore usually occurs between February and May. However, the exact timing of strobilation is highly variable across years and regions, and will be impacted by future climatic shifts in the timing of seasonal temperature cycles. By changing the ",
span(strong("release period"), style = 'color: #DC9257'),
"you can evaluate how changing the timing of ephyra release will influence to subsequent development of medusae populations."),
style = "color: #EFF0F8; text-align: center"),
br(),
h4("Simulation details", style = 'color: #DC9257; text-align: center'),
h5(p("Selecting the",
span(strong("Number of iterations"),style = 'color: #DC9257'),
"informs the Risk Map tool of how many times it needs to repeat simulations. Each time a simulation is initiated, new estimates describing the survival and growth characteristics of the population are calculated.",
"These simulations are, therefore, stochastic simulations, with the Risk Map returning density estimates averaged from across each repeated simulation, plus a measure of the variability across these different simulations (standard deviation). The more iterations (repeats) the Risk Maps completes, the more reliable its projected outputs."),
style = "color: #EFF0F8; text-align: center"),
# change well panel background color
style = 'background: #2C2D7C')
)))
)),
# Next insert a tab to display simulation outputs
tabPanel(strong("Results"),
value = "ResultsPanel",
# This tab will consist of two sub-tabs - one showing the primary density plots and the other the variance plots
tabsetPanel(
# Primary Medusae density plots
tabPanel("Density patterns",
h5(p("This tab displays expected temporal and spatial variation in",
HTML(paste0(strong("relative Medusae density"), ".", ""))),
p("Relative Medusae density is displayed using a colour scale depicting the liklihood or",
strong("RISK"),
"of encounter."),
p(em("Note: The solid circles denote the position of the selected release location(s)")),
style = "text-align: center"),
plotOutput(outputId = 'mean.plot', height = '1300px')
),
# confidence plot - showing the extent of variation generated by demographic stochasticity.
tabPanel("Stochastic variability",
h5(p(style = "text-align: center", "Plots displayed on this tab show the standard deviation of all projected densities; offering a measure of confidence in any predicted density patterns.")),
plotOutput(outputId = 'sd.plot', height = '1300px')
)
)
),
# Insert universal page footer across tabs
footer = tags$footer(class = "footer",
style = "background-color: #232323",
p(
hr(),
column(1, offset = 1, a(img(src = "https://gojelly.eu/wp-content/uploads/2018/02/gojelly-white.png", style = "height: 150px"), href = "https://gojelly.eu/", target = "_blank")),
column(3, offset = 1, p(h4(strong("GoJelly"))),
p(h6("A gelatinous solution to plastic pollution: An innovative EU H2020 funded project seeking to use jellyfish as a solution to combat marine litter.")),
p(h6(span(strong("Find out more:"), style = 'color: #ACAFD9'), a("https://gojelly.eu/", href = "https://gojelly.eu/", target = "_blank")))),
column(2, p(h4(strong("Get in touch today")), style = "text-align: center"),
p(h6(strong("Jamileh Javidpour:"), "jamileh@biology.sdu.dk"), style = "text-align: center"),
p(h6(strong("Owen Jones:"), "jones@biology.sdu.dk"), style = "text-align: center"),
p(h6(strong("James Cant:"), "jic2@st-andrews.ac.uk"), style = "text-align: center")),
column(3, p(h4(strong("Horizon 2020"))),
p(h6("GoJelly was funded by the European Union’s Horizon 2020 research and innovation programme under grant agreement No 774499.")),
br(),
div("(c) 2018 | GoJelly.eu", style = 'font-size: 12px; text-align: right')))
)
)
)
# define server functions (instructions - for how to convert inputs into the outputs
server <- function(input, output, session) { # inputs are the user define variables & outputs are the visuals returned to the user.
## create outputs and store - these outputs must use the requested inputs
# Use observeEvent to ensure simulation guides users to outputs once simulation is initiated.
observeEvent(input$start, {
updateTabsetPanel(session = session, inputId = "PageNavigation", selected = "ResultsPanel")
})
# use eventReactive to delay the reactive simulation process until users click 'Run Simulation'.
# initiating the simulation will call the JellySim function
sim_data <- eventReactive(input$start, {
# Display loading message (particularly useful for longer simulations)
showModal(modalDialog(h3("Jellyfish drifting..."),
h5(br(),
"Once this simulation is complete, please wait a few seconds for the page to update...", style = "color: #EFF0F8; text-align: center"),
footer =img(src = "https://gojelly.eu/wp-content/uploads/2018/02/gojelly-white.png", style = "height: 150px"),
size = 'l',
easyClose = FALSE,
fade = TRUE))
# Takes the categorical month range provided and converts
# into the numerical format required by the simulation function
rel_month_num <- c(match(input$rel_months[1], month.name):match(input$rel_months[2], month.name))
# instigate simulation
Jelly_data <- quiet(JellySim(pars = params, driftData = SINMOD_data,
xmx = xx, xmn = xn, ymx = yx, ymn = yn, # internal data requirements of the function
n_days = nd,
m = m,
# user defined parameters
rel_location = input$rel_location,
rel_months = rel_month_num,
zmax = input$zmax,
parallel = pl))
# Update user
removeModal()
# let the reactive function know what information it is focusing on
return(Jelly_data)
})
# following the implementation of the simulation the SimPlot function will use the required simulation outputs to produce the monthly plots
sim_outputs <- reactive({
# first determine the required data has been produced.
req(sim_data())
# create maps
Jelly_plots <- SimPlot(meanRast= sim_data()$mean, sdRast = sim_data()$sd,
sites = sim_data()$site,
xmx = xx, xmn = xn, ymx = yx, ymn = yn)
# Now extract each of the required monthly plots
# Primary Plot
MeanPlot <- Jelly_plots$mean
# Confidence Plot
ConfPlot <- Jelly_plots$sd
# Condense together the plots
plots <- list(MeanPlot = MeanPlot, ConfPlot = ConfPlot)
# Let the reactive function know what information it is focusing on
return(plots)
})
# Insert desired plot outputs
# Primary plot
output$mean.plot <- renderPlot({
tryCatch( {
plots <- sim_outputs()
plots$MeanPlot
} , shiny.silent.error = function(e) {
validate("Select release location(s) to initiate density simulation")
} )
}, height = 'auto', bg = '#EFF0F8', execOnResize = TRUE)
# Confidence plots
output$conf.plot <- renderPlot({
tryCatch( {
plots <- sim_outputs()
plots$ConfPlot
} , shiny.silent.error = function(e) {
validate("")
} )
}, height = 'auto', bg = '#EFF0F8', execOnResize = TRUE)
# close server function
}
# Knit the two elements together
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='gojellyeu', token='AA49E192689A63F191B6C8F0296C4F9C', secret='kP4I9DaowCREVY4vWg1fxOjWrTYqedRb013rE/YY')
library(rsconnect)
rsconnect::deployApp('C:/Users/jic2/OneDrive - University of St Andrews/Documents/GoJellyApp')
?ne_countries
packages <- c('data.table',
'terra',
'sf',
'purrr',
'pbapply',
'abind',
'foreach',
'future',
'doFuture',
'purrr',
'gamlss',
'gamlss.dist',
"viridis",
"ggplot2",
"rnaturalearth",
"rnaturalearthdata",
"scales",
'plyr',
'ggsn',
'shiny',
'shinydashboard',
'shinyWidgets',
'shinythemes',
'plotly')
lapply(packages, require, character.only = TRUE, quietly = TRUE)
rsconnect::deployApp('C:/Users/jic2/OneDrive - University of St Andrews/Documents/GoJellyApp')
version
sessionInfo()
# Define file path
filePath <- 'C:/Users/jic2/OneDrive - University of St Andrews/Documents/github/Bloom-forecasting-tools/'
?source
# Load required function scripts
test <- c('JellySim.R','DMat.R')
source(paste0(filePath, test))
source(paste0(filePath, 'JellySim.R'))
rm(test)
source(paste0(filePath, 'DMat.R'))
source(paste0(filePath, 'SimPlot.R'))
# Load demographic parameters
demogpars <- read.csv(paste0(filePath, 'Demographic parameters.csv'))
# Load drifting details
load(paste0(filePath, 'ParticleTracks2021.RData'))
# Load demographic parameters
demogpars <- read.csv(paste0(filePath, 'Demographic parameters.csv'), row.names = 1)
demogpars <- with(demogpars, setNames(x, rownames(demogpars))) # ensure appropriate rownaming
nd = 30
# simulation spatial extents
xx = 31
xn = 3
yx = 66
yn = 53
# selected release locations
sites = c(598,240,954,597) # corresponds with the selection of sites in the central Baltic, the eastern Baltic, the Gulf of Finland and the Skagerrak & Kattegat region.
# release timings
months = c(2:5) # corresponds with February through to May inclusive
# Demographic matrix dimensions
m = 200
# Resampling iterations
z = 10
# Multicore processing (True or False)
pl = TRUE
##############################################
# STEP 1: Load required files
##############################################
# Define file path
filePath <- 'file_directory_path/'
# Load required functions
source(paste0(filePath, 'JellySim.R'))
# Define file path
filePath <- 'C:/Users/jic2/OneDrive - University of St Andrews/Documents/github/Bloom-forecasting-tools/'
# Load required functions
source(paste0(filePath, 'JellySim.R'))
source(paste0(filePath, 'DMat.R'))
source(paste0(filePath, 'SimPlot.R'))
# Load demographic parameters
demogpars <- read.csv(paste0(filePath, 'Demographic parameters.csv'), row.names = 1)
demogpars <- with(demogpars, setNames(x, rownames(demogpars))) # ensure appropriate rownaming
# Load drifting details
load(paste0(filePath, 'ParticleTracks2021.RData'))
##############################################
# STEP 2: Define model parameters
##############################################
# define user specific model parameters
# temporal resolutions of drifting simulations
nd = 30
# simulation spatial extents
xx = 31
xn = 3
yx = 66
yn = 53
# selected release locations
sites = c(598,240,954,597) # corresponds with the selection of sites in the central Baltic, the eastern Baltic, the Gulf of Finland and the Skagerrak & Kattegat region.
# release timings
months = c(2:5) # corresponds with February through to May inclusive
# Demographic matrix dimensions
m = 200
# Resampling iterations
z = 10
# Multicore processing (True or False)
pl = TRUE
JellyData <- JellySim(# demographic details
pars = demogpars,
m = m,
# drifting details
driftData = SINMOD_data,
n_days = nd,
# spatial details
xmx = xx, xmn = xn, ymx = yx, ymn = yn,
rel_location = sites,
# temporal details
rel_months = months,
# Resampling details
zmax = z,
# request for multicore processing
parallel = pl)
# Load required functions
source(paste0(filePath, 'JellySim.R'))
JellyData <- JellySim(# demographic details
pars = demogpars,
m = m,
# drifting details
driftData = SINMOD_data,
n_days = nd,
# spatial details
xmx = xx, xmn = xn, ymx = yx, ymn = yn,
rel_location = sites,
# temporal details
rel_months = months,
# Resampling details
zmax = z,
# request for multicore processing
parallel = pl)
# Load required functions
source(paste0(filePath, 'JellySim.R'))
JellyData <- JellySim(# demographic details
pars = demogpars,
m = m,
# drifting details
driftData = SINMOD_data,
n_days = nd,
# spatial details
xmx = xx, xmn = xn, ymx = yx, ymn = yn,
rel_location = sites,
# temporal details
rel_months = months,
# Resampling details
zmax = z,
# request for multicore processing
parallel = pl)
Jelly_plots <- SimPlot(# main forecasts
meanRast = JellyData$mean,
# plots showing forecast confidence
sdRast = sim_data()$sd,
# Highlight initial release sites
sites = JellyData$site,
# Spatial extent of plots
xmx = xx, xmn = xn, ymx = yx, ymn = yn)
Jelly_plots <- SimPlot(# main forecasts
meanRast = JellyData$mean,
# plots showing forecast confidence
sdRast = JellyData$sd,
# Highlight initial release sites
sites = JellyData$site,
# Spatial extent of plots
xmx = xx, xmn = xn, ymx = yx, ymn = yn)
rm(Jelly_plots)
JellyPlots <- SimPlot(# main forecasts
meanRast = JellyData$mean,
# plots showing forecast confidence
sdRast = JellyData$sd,
# Highlight initial release sites
sites = JellyData$site,
# Spatial extent of plots
xmx = xx, xmn = xn, ymx = yx, ymn = yn)
# Mean forecasts
JellyPlots$mean
source(paste0(filePath, 'SimPlot.R'))
JellyPlots <- SimPlot(# main forecasts
meanRast = JellyData$mean,
# plots showing forecast confidence
sdRast = JellyData$sd,
# Highlight initial release sites
sites = JellyData$site,
# Spatial extent of plots
xmx = xx, xmn = xn, ymx = yx, ymn = yn)
# Mean forecasts
JellyPlots$mean
source(paste0(filePath, 'SimPlot.R'))
JellyPlots <- SimPlot(# main forecasts
meanRast = JellyData$mean,
# plots showing forecast confidence
sdRast = JellyData$sd,
# Highlight initial release sites
sites = JellyData$site,
# Spatial extent of plots
xmx = xx, xmn = xn, ymx = yx, ymn = yn)
# Mean forecasts
JellyPlots$mean
coord_sf
?coord_sf
source(paste0(filePath, 'SimPlot.R'))
JellyPlots <- SimPlot(# main forecasts
meanRast = JellyData$mean,
# plots showing forecast confidence
sdRast = JellyData$sd,
# Highlight initial release sites
sites = JellyData$site,
# Spatial extent of plots
xmx = xx, xmn = xn, ymx = yx, ymn = yn)
# Mean forecasts
JellyPlots$mean
source(paste0(filePath, 'SimPlot.R'))
JellyPlots <- SimPlot(# main forecasts
meanRast = JellyData$mean,
# plots showing forecast confidence
sdRast = JellyData$sd,
# Highlight initial release sites
sites = JellyData$site,
# Spatial extent of plots
xmx = xx, xmn = xn, ymx = yx, ymn = yn)
source(paste0(filePath, 'SimPlot.R'))
JellyPlots <- SimPlot(# main forecasts
meanRast = JellyData$mean,
# plots showing forecast confidence
sdRast = JellyData$sd,
# Highlight initial release sites
sites = JellyData$site,
# Spatial extent of plots
xmx = xx, xmn = xn, ymx = yx, ymn = yn)
# Mean forecasts
JellyPlots$mean
# Mean forecasts
JellyPlots$mean
# Mean forecasts
JellyPlots$mean
JellyPlots <- SimPlot(# main forecasts
meanRast = JellyData$mean,
# plots showing forecast confidence
sdRast = JellyData$sd,
# Highlight initial release sites
sites = JellyData$site,
# Spatial extent of plots
xmx = xx, xmn = xn, ymx = yx, ymn = yn)
# Mean forecasts
JellyPlots$mean
# Forecast confidence
JellyPlots$sd
source(paste0(filePath, 'SimPlot.R'))
JellyPlots <- SimPlot(# main forecasts
meanRast = JellyData$mean,
# plots showing forecast confidence
sdRast = JellyData$sd,
# Highlight initial release sites
sites = JellyData$site,
# Spatial extent of plots
xmx = xx, xmn = xn, ymx = yx, ymn = yn)
# Forecast confidence
JellyPlots$sd
